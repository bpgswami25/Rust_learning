//Create two thread one will print even number and other one odd number in a sequence
//Output - 1,2,3,4,5,6,7,,8,9,10...

use std::thread;

use std::sync::{Arc, Mutex, Condvar};


pub fn print_even(n:& mut i32, pair: Arc<(Mutex<i32>, Condvar)>)
{
    
    let (lock, cvar) = &*pair;

    loop{

    let mut lck = lock.lock().unwrap();
  //  println!("1");
        if *n > 10 {
            cvar.notify_all();
            break;
        }
        if *n % 2 == 0 {
            println!(" {}", n);
           
        } else {
            
            lck = cvar.wait(lck).unwrap();
             cvar.notify_all();  
        } 
         *n += 1;
        // cvar.notify_all();
    }
}

pub fn print_odd(n:& mut i32, pair: Arc<(Mutex<i32>, Condvar)>)
{
    
    
    let (lock, cvar) = &*pair;
    loop{

       let mut lck = lock.lock().unwrap();
     //  println!("2");
        if *n > 10 {
            cvar.notify_all();
            break;
        }
        if *n % 2 != 0 {
            println!(" {}", n);
            
        } else {
            cvar.notify_all();  
            lck = cvar.wait(lck).unwrap();
        }  
        *n += 1;   
        //cvar.notify_all();  
    }
}

fn main()
{
    let pair = Arc::new((Mutex::new(1), Condvar::new()));
    #[warn(unused_mut)]
    let mut n:i32 =1;

    let pair1 = Arc::clone(&pair);
    let pair2 = Arc::clone(&pair);

      let t1 = thread::spawn(move || print_even(&mut n,pair1));
    let t2 = thread::spawn(move || print_odd(&mut n,pair2));

  
    
    t1.join().unwrap();
    t2.join().unwrap();
}